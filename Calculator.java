package com.mycompany.mavenproject1;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;

import java.awt.Dimension;
import java.awt.Font;

import java.util.List;
import java.util.Arrays;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JSeparator;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author sss
 */
public class Calculator extends javax.swing.JFrame {
private JPanel sideMenuPanel;
private boolean isMenuVisible = false;
private JPanel settingsPanel;
private JLabel titleLabel;
private JButton appThemeButton;
private boolean isLightMode = true;
private JPanel themeOptionsPanel;
private JButton applyButton;
private JRadioButton lightMode;
private JRadioButton darkMode;

// تحديد قيمة افتراضية للوضع

  // تعيين الوضع الافتراضي إلى "الوضع الأساسي"





    /**
     * Creates new form Calculator
     */
    public Calculator() {
                initComponents();
                 showMainMode();
                 setDarkMode();
                
         initSideMenu();
        screenTextField.setEditable(true);



    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jButton31 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jMenu1 = new javax.swing.JMenu();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        divisionButton = new javax.swing.JButton();
        pieButton = new javax.swing.JButton();
        dotButton = new javax.swing.JButton();
        equalButton = new javax.swing.JButton();
        convertButton = new javax.swing.JButton();
        minusButton = new javax.swing.JButton();
        plusButton = new javax.swing.JButton();
        zeroButton = new javax.swing.JButton();
        threeButton = new javax.swing.JButton();
        twoButton = new javax.swing.JButton();
        oneButton = new javax.swing.JButton();
        sixButton = new javax.swing.JButton();
        delButton = new javax.swing.JButton();
        timesButton = new javax.swing.JButton();
        nineButton = new javax.swing.JButton();
        sevenButton = new javax.swing.JButton();
        fiveButton = new javax.swing.JButton();
        eightButton = new javax.swing.JButton();
        acButton = new javax.swing.JButton();
        fourButton = new javax.swing.JButton();
        absButton = new javax.swing.JButton();
        logButton = new javax.swing.JButton();
        cosButton = new javax.swing.JButton();
        tanButton = new javax.swing.JButton();
        factButton = new javax.swing.JButton();
        sinButton = new javax.swing.JButton();
        pow2Button = new javax.swing.JButton();
        powButton = new javax.swing.JButton();
        leftButton = new javax.swing.JButton();
        sqrt3Button = new javax.swing.JButton();
        eButton = new javax.swing.JButton();
        sqrtButton = new javax.swing.JButton();
        onButton = new javax.swing.JButton();
        offButton = new javax.swing.JButton();
        rightButton = new javax.swing.JButton();
        lnButton = new javax.swing.JButton();
        modulusButton = new javax.swing.JButton();
        overxButton = new javax.swing.JButton();
        screenpanel = new javax.swing.JPanel();
        resultLabel = new javax.swing.JLabel();
        screenTextField = new javax.swing.JTextField();
        mathLabel = new javax.swing.JLabel();
        ansButton = new javax.swing.JButton();
        btnLift = new javax.swing.JButton();
        btnRight = new javax.swing.JButton();
        btnMenu = new javax.swing.JButton();
        esaLabel1 = new javax.swing.JLabel();
        btnHEX = new javax.swing.JButton();
        btnBIN = new javax.swing.JButton();
        btnOCT = new javax.swing.JButton();
        btnDEC = new javax.swing.JButton();
        btnAlpha = new javax.swing.JComboBox<>();

        jButton31.setBackground(new java.awt.Color(0, 0, 0));
        jButton31.setForeground(new java.awt.Color(255, 255, 255));
        jButton31.setText("jButton1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jMenu1.setText("jMenu1");

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        jMenu2.setText("File");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar1.add(jMenu3);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculator");
        setFont(new java.awt.Font("Agency FB", 1, 10)); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setForeground(new java.awt.Color(51, 51, 51));

        divisionButton.setBackground(new java.awt.Color(255, 153, 0));
        divisionButton.setText("➗");
        divisionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divisionButtonActionPerformed(evt);
            }
        });

        pieButton.setBackground(new java.awt.Color(102, 102, 102));
        pieButton.setForeground(new java.awt.Color(255, 255, 255));
        pieButton.setText("π");
        pieButton.setMaximumSize(new java.awt.Dimension(35, 35));
        pieButton.setMinimumSize(new java.awt.Dimension(35, 35));
        pieButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pieButtonActionPerformed(evt);
            }
        });

        dotButton.setBackground(new java.awt.Color(102, 102, 102));
        dotButton.setForeground(new java.awt.Color(255, 255, 255));
        dotButton.setText(".");
        dotButton.setMaximumSize(new java.awt.Dimension(35, 35));
        dotButton.setMinimumSize(new java.awt.Dimension(35, 35));
        dotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dotButtonActionPerformed(evt);
            }
        });

        equalButton.setBackground(new java.awt.Color(255, 153, 0));
        equalButton.setText("=");
        equalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalButtonActionPerformed(evt);
            }
        });

        convertButton.setBackground(new java.awt.Color(0, 51, 153));
        convertButton.setForeground(new java.awt.Color(255, 255, 255));
        convertButton.setText("± ");
        convertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertButtonActionPerformed(evt);
            }
        });

        minusButton.setBackground(new java.awt.Color(255, 153, 0));
        minusButton.setText("-");
        minusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusButtonActionPerformed(evt);
            }
        });

        plusButton.setBackground(new java.awt.Color(255, 153, 0));
        plusButton.setText("+");
        plusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusButtonActionPerformed(evt);
            }
        });

        zeroButton.setBackground(new java.awt.Color(102, 102, 102));
        zeroButton.setForeground(new java.awt.Color(255, 255, 255));
        zeroButton.setText("0");
        zeroButton.setMaximumSize(new java.awt.Dimension(35, 35));
        zeroButton.setMinimumSize(new java.awt.Dimension(35, 35));
        zeroButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroButtonActionPerformed(evt);
            }
        });

        threeButton.setBackground(new java.awt.Color(102, 102, 102));
        threeButton.setForeground(new java.awt.Color(255, 255, 255));
        threeButton.setText("3");
        threeButton.setMaximumSize(new java.awt.Dimension(35, 35));
        threeButton.setMinimumSize(new java.awt.Dimension(35, 35));
        threeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeButtonActionPerformed(evt);
            }
        });

        twoButton.setBackground(new java.awt.Color(102, 102, 102));
        twoButton.setForeground(new java.awt.Color(255, 255, 255));
        twoButton.setText("2");
        twoButton.setMaximumSize(new java.awt.Dimension(35, 35));
        twoButton.setMinimumSize(new java.awt.Dimension(35, 35));
        twoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoButtonActionPerformed(evt);
            }
        });

        oneButton.setBackground(new java.awt.Color(102, 102, 102));
        oneButton.setForeground(new java.awt.Color(255, 255, 255));
        oneButton.setText("1");
        oneButton.setMaximumSize(new java.awt.Dimension(35, 35));
        oneButton.setMinimumSize(new java.awt.Dimension(35, 35));
        oneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneButtonActionPerformed(evt);
            }
        });

        sixButton.setBackground(new java.awt.Color(102, 102, 102));
        sixButton.setForeground(new java.awt.Color(255, 255, 255));
        sixButton.setText("6");
        sixButton.setMaximumSize(new java.awt.Dimension(35, 35));
        sixButton.setMinimumSize(new java.awt.Dimension(35, 35));
        sixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixButtonActionPerformed(evt);
            }
        });

        delButton.setBackground(new java.awt.Color(255, 102, 0));
        delButton.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        delButton.setText("DEL");
        delButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delButtonActionPerformed(evt);
            }
        });

        timesButton.setBackground(new java.awt.Color(255, 153, 0));
        timesButton.setText("X");
        timesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timesButtonActionPerformed(evt);
            }
        });

        nineButton.setBackground(new java.awt.Color(102, 102, 102));
        nineButton.setForeground(new java.awt.Color(255, 255, 255));
        nineButton.setText("9");
        nineButton.setMaximumSize(new java.awt.Dimension(35, 35));
        nineButton.setMinimumSize(new java.awt.Dimension(35, 35));
        nineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nineButtonActionPerformed(evt);
            }
        });

        sevenButton.setBackground(new java.awt.Color(102, 102, 102));
        sevenButton.setForeground(new java.awt.Color(255, 255, 255));
        sevenButton.setText("7");
        sevenButton.setMaximumSize(new java.awt.Dimension(35, 35));
        sevenButton.setMinimumSize(new java.awt.Dimension(35, 35));
        sevenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenButtonActionPerformed(evt);
            }
        });

        fiveButton.setBackground(new java.awt.Color(102, 102, 102));
        fiveButton.setForeground(new java.awt.Color(255, 255, 255));
        fiveButton.setText("5");
        fiveButton.setMaximumSize(new java.awt.Dimension(35, 35));
        fiveButton.setMinimumSize(new java.awt.Dimension(35, 35));
        fiveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveButtonActionPerformed(evt);
            }
        });

        eightButton.setBackground(new java.awt.Color(102, 102, 102));
        eightButton.setForeground(new java.awt.Color(255, 255, 255));
        eightButton.setText("8");
        eightButton.setMaximumSize(new java.awt.Dimension(35, 35));
        eightButton.setMinimumSize(new java.awt.Dimension(35, 35));
        eightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightButtonActionPerformed(evt);
            }
        });

        acButton.setBackground(new java.awt.Color(255, 102, 0));
        acButton.setText("AC");
        acButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acButtonActionPerformed(evt);
            }
        });

        fourButton.setBackground(new java.awt.Color(102, 102, 102));
        fourButton.setForeground(new java.awt.Color(255, 255, 255));
        fourButton.setText("4");
        fourButton.setMaximumSize(new java.awt.Dimension(35, 35));
        fourButton.setMinimumSize(new java.awt.Dimension(35, 35));
        fourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourButtonActionPerformed(evt);
            }
        });

        absButton.setBackground(new java.awt.Color(0, 51, 153));
        absButton.setForeground(new java.awt.Color(255, 255, 255));
        absButton.setText("Abs");
        absButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                absButtonActionPerformed(evt);
            }
        });

        logButton.setBackground(new java.awt.Color(0, 51, 153));
        logButton.setForeground(new java.awt.Color(255, 255, 255));
        logButton.setText("log");
        logButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logButtonActionPerformed(evt);
            }
        });

        cosButton.setBackground(new java.awt.Color(0, 51, 153));
        cosButton.setForeground(new java.awt.Color(255, 255, 255));
        cosButton.setText("cos");
        cosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cosButtonActionPerformed(evt);
            }
        });

        tanButton.setBackground(new java.awt.Color(0, 51, 153));
        tanButton.setForeground(new java.awt.Color(255, 255, 255));
        tanButton.setText("tan");
        tanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tanButtonActionPerformed(evt);
            }
        });

        factButton.setBackground(new java.awt.Color(0, 51, 153));
        factButton.setForeground(new java.awt.Color(255, 255, 255));
        factButton.setText("!");
        factButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factButtonActionPerformed(evt);
            }
        });

        sinButton.setBackground(new java.awt.Color(0, 51, 153));
        sinButton.setForeground(new java.awt.Color(255, 255, 255));
        sinButton.setText("sin");
        sinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinButtonActionPerformed(evt);
            }
        });

        pow2Button.setBackground(new java.awt.Color(0, 51, 153));
        pow2Button.setForeground(new java.awt.Color(255, 255, 255));
        pow2Button.setText("x²");
        pow2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pow2ButtonActionPerformed(evt);
            }
        });

        powButton.setBackground(new java.awt.Color(0, 51, 153));
        powButton.setForeground(new java.awt.Color(255, 255, 255));
        powButton.setText("xʸ ");
        powButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powButtonActionPerformed(evt);
            }
        });

        leftButton.setBackground(new java.awt.Color(0, 51, 153));
        leftButton.setForeground(new java.awt.Color(255, 255, 255));
        leftButton.setText("(");
        leftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftButtonActionPerformed(evt);
            }
        });

        sqrt3Button.setBackground(new java.awt.Color(0, 51, 153));
        sqrt3Button.setForeground(new java.awt.Color(255, 255, 255));
        sqrt3Button.setText("∛ ");
        sqrt3Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sqrt3ButtonActionPerformed(evt);
            }
        });

        eButton.setBackground(new java.awt.Color(0, 51, 153));
        eButton.setForeground(new java.awt.Color(255, 255, 255));
        eButton.setText("e");
        eButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eButtonActionPerformed(evt);
            }
        });

        sqrtButton.setBackground(new java.awt.Color(0, 51, 153));
        sqrtButton.setForeground(new java.awt.Color(255, 255, 255));
        sqrtButton.setText("√");
        sqrtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sqrtButtonActionPerformed(evt);
            }
        });

        onButton.setBackground(new java.awt.Color(0, 102, 102));
        onButton.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        onButton.setForeground(new java.awt.Color(255, 255, 255));
        onButton.setText("ON");
        onButton.setMaximumSize(new java.awt.Dimension(50, 25));
        onButton.setMinimumSize(new java.awt.Dimension(50, 22));
        onButton.setPreferredSize(new java.awt.Dimension(50, 25));
        onButton.setRolloverEnabled(false);
        onButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onButtonActionPerformed(evt);
            }
        });

        offButton.setBackground(new java.awt.Color(0, 102, 102));
        offButton.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        offButton.setForeground(new java.awt.Color(255, 255, 255));
        offButton.setText("OFF");
        offButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                offButtonActionPerformed(evt);
            }
        });

        rightButton.setBackground(new java.awt.Color(0, 51, 153));
        rightButton.setForeground(new java.awt.Color(255, 255, 255));
        rightButton.setText(")");
        rightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightButtonActionPerformed(evt);
            }
        });

        lnButton.setBackground(new java.awt.Color(0, 51, 153));
        lnButton.setForeground(new java.awt.Color(255, 255, 255));
        lnButton.setText("ln");
        lnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lnButtonActionPerformed(evt);
            }
        });

        modulusButton.setBackground(new java.awt.Color(0, 51, 153));
        modulusButton.setForeground(new java.awt.Color(255, 255, 255));
        modulusButton.setText("%");
        modulusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modulusButtonActionPerformed(evt);
            }
        });

        overxButton.setBackground(new java.awt.Color(0, 51, 153));
        overxButton.setForeground(new java.awt.Color(255, 255, 255));
        overxButton.setText("¹⁄ₓ ");
        overxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overxButtonActionPerformed(evt);
            }
        });

        screenpanel.setBackground(new java.awt.Color(102, 102, 102));

        resultLabel.setBackground(new java.awt.Color(255, 255, 255));
        resultLabel.setForeground(new java.awt.Color(255, 255, 255));

        screenTextField.setEditable(false);
        screenTextField.setBackground(new java.awt.Color(102, 102, 102));
        screenTextField.setForeground(new java.awt.Color(255, 255, 255));
        screenTextField.setBorder(null);
        screenTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                screenTextFieldActionPerformed(evt);
            }
        });

        mathLabel.setBackground(new java.awt.Color(255, 255, 255));
        mathLabel.setForeground(new java.awt.Color(255, 255, 255));
        mathLabel.setText("math");

        javax.swing.GroupLayout screenpanelLayout = new javax.swing.GroupLayout(screenpanel);
        screenpanel.setLayout(screenpanelLayout);
        screenpanelLayout.setHorizontalGroup(
            screenpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(screenpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(screenTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(mathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, screenpanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        screenpanelLayout.setVerticalGroup(
            screenpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(screenpanelLayout.createSequentialGroup()
                .addGroup(screenpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mathLabel)
                    .addGroup(screenpanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(screenTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        ansButton.setBackground(new java.awt.Color(255, 153, 0));
        ansButton.setText("Ans");
        ansButton.setMaximumSize(new java.awt.Dimension(75, 23));
        ansButton.setMinimumSize(null);
        ansButton.setPreferredSize(new java.awt.Dimension(75, 23));
        ansButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ansButtonActionPerformed(evt);
            }
        });

        btnLift.setBackground(new java.awt.Color(204, 204, 204));
        btnLift.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        btnLift.setText("L");
        btnLift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiftActionPerformed(evt);
            }
        });

        btnRight.setBackground(new java.awt.Color(204, 204, 204));
        btnRight.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        btnRight.setText("R");
        btnRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRightActionPerformed(evt);
            }
        });

        btnMenu.setText("☰");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });

        esaLabel1.setBackground(new java.awt.Color(102, 102, 102));
        esaLabel1.setForeground(new java.awt.Color(255, 255, 255));
        esaLabel1.setText("ESA");
        esaLabel1.setToolTipText("");

        btnHEX.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        btnHEX.setText("HEX");
        btnHEX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHEXActionPerformed(evt);
            }
        });

        btnBIN.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        btnBIN.setText("BIN");
        btnBIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBINActionPerformed(evt);
            }
        });

        btnOCT.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        btnOCT.setText("OCT");
        btnOCT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOCTActionPerformed(evt);
            }
        });

        btnDEC.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        btnDEC.setText("DEC");
        btnDEC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDECActionPerformed(evt);
            }
        });

        btnAlpha.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        btnAlpha.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B", "C", "D", "E", "F" }));
        btnAlpha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlphaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(160, 160, 160)
                                .addComponent(esaLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(screenpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(powButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sqrt3Button, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(modulusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(sinButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnOCT, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnHEX, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnBIN, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnDEC, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnAlpha, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(sevenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(eightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(nineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(delButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(acButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(fourButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(fiveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(sixButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(timesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(divisionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(oneButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(twoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(threeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(plusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(minusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(zeroButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(dotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(pieButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(ansButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(equalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(logButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(pow2Button, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(sqrtButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(factButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(absButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(convertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(overxButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(20, 20, 20)
                                        .addComponent(eButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(tanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(20, 20, 20)
                                        .addComponent(cosButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(offButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(btnLift, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(leftButton)
                                .addGap(56, 56, 56)
                                .addComponent(rightButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRight, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(onButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 6, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(btnMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(esaLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(screenpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(offButton))
                    .addComponent(btnLift, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(leftButton)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnRight, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(onButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rightButton)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(powButton)))
                    .addComponent(sqrt3Button, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sinButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(modulusButton)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sqrtButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(pow2Button)
                        .addComponent(logButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cosButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(factButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(absButton)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(convertButton)
                                .addComponent(overxButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(eButton)))))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnHEX, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBIN, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOCT, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDEC, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAlpha, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sevenButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eightButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nineButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(delButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(acButton))))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fourButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fiveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sixButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timesButton)
                    .addComponent(divisionButton))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(oneButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(twoButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(threeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(plusButton)
                    .addComponent(minusButton))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(zeroButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dotButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pieButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ansButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(equalButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        
private Runnable returnAction; // تعريف المتغير لحفظ الفعل الذي سيتم العودة إليه
private StringBuilder historyBuilder = new StringBuilder();

private void initSideMenu() {
    sideMenuPanel = new JPanel(new BorderLayout());
    sideMenuPanel.setBackground(new Color(50, 50, 50));
    sideMenuPanel.setBounds(-150, 0, 150, 300);
    sideMenuPanel.setPreferredSize(new Dimension(150, 300));

    // ===== حذف زر الرجوع (أعلى الشمال) =====
    // closeMenuButton لا حاجة له بعد الآن

    // ===== منتصف القائمة =====
    JPanel centerPanel = new JPanel();
    centerPanel.setLayout(new BoxLayout(centerPanel, BoxLayout.Y_AXIS));
    centerPanel.setOpaque(false);

    centerPanel.add(Box.createVerticalStrut(10));
    JSeparator separator = new JSeparator();
    separator.setForeground(Color.GRAY);
    separator.setMaximumSize(new Dimension(140, 1));
    centerPanel.add(separator);
    centerPanel.add(Box.createVerticalStrut(10));

    JLabel modesLabel = new JLabel("Calculator Modes", SwingConstants.CENTER);
    modesLabel.setForeground(Color.WHITE);
    modesLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
    centerPanel.add(modesLabel);
    centerPanel.add(Box.createVerticalStrut(10));

    JButton mainModeBtn = new JButton("Main Mode");
    mainModeBtn.setMaximumSize(new Dimension(140, 40));
    mainModeBtn.setAlignmentX(Component.CENTER_ALIGNMENT);
    mainModeBtn.setFocusPainted(false);
    mainModeBtn.addActionListener(e -> {
        showMainMode();
        returnAction = () -> showMainMode(); // حفظ الإجراء
    });
    centerPanel.add(mainModeBtn);

    JButton funcModeBtn = new JButton("Functional Mode");
    funcModeBtn.setMaximumSize(new Dimension(140, 40));
    funcModeBtn.setAlignmentX(Component.CENTER_ALIGNMENT);
    funcModeBtn.setFocusPainted(false);
    funcModeBtn.addActionListener(e -> {
        showFunctionalMode();
        returnAction = () -> showFunctionalMode(); // حفظ الإجراء
    });
    centerPanel.add(funcModeBtn);
    
    JButton pr = new JButton("Programmer </>");
    pr.setMaximumSize(new Dimension(140, 40));
    pr.setAlignmentX(Component.CENTER_ALIGNMENT);
    pr.setFocusPainted(false);
    pr.addActionListener(e -> {
        showProgramingMode();
        returnAction = () -> showProgramingMode(); // حفظ الإجراء
    });
    centerPanel.add(pr);

    sideMenuPanel.add(centerPanel, BorderLayout.CENTER);

    // ===== زر الإعدادات (أسفل القائمة) =====
    JButton settingsButton = new JButton(" Settings ⚙ ");
    settingsButton.setMaximumSize(new Dimension(140, 40));
    settingsButton.setAlignmentX(Component.CENTER_ALIGNMENT);
    settingsButton.setBackground(new Color(255, 165, 0));
    settingsButton.setForeground(Color.BLACK);
    settingsButton.setFocusPainted(false);
    settingsButton.addActionListener(e -> showSettingsMenu());

    JPanel bottomPanel = new JPanel();
    bottomPanel.setOpaque(false);
    bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.Y_AXIS));
    bottomPanel.add(Box.createVerticalStrut(10));
    
    bottomPanel.add(settingsButton);
    bottomPanel.add(Box.createVerticalStrut(10));
    JButton historyButton = new JButton(" History 📜 ");
    historyButton.setMaximumSize(new Dimension(140, 40));
    historyButton.setAlignmentX(Component.CENTER_ALIGNMENT);
    historyButton.setFocusPainted(false);
    historyButton.addActionListener(e -> {
    JOptionPane.showMessageDialog(this, historyBuilder.toString(), "History", JOptionPane.INFORMATION_MESSAGE);
});

centerPanel.add(historyButton);

    sideMenuPanel.add(bottomPanel, BorderLayout.SOUTH);

    this.getLayeredPane().add(sideMenuPanel, JLayeredPane.PALETTE_LAYER);
    sideMenuPanel.setVisible(true);
    sideMenuPanel.revalidate();
    sideMenuPanel.repaint();

    // إبقاء زر المنيو btnMenu ظاهرًا
    btnMenu.setVisible(true);
    btnMenu.setEnabled(true);
}

// دالة لإضافة زر "Menu" في صفحة الإعدادات
private void initSettingsMenuButton() {
    // إنشاء زر المينيو
    JButton settingsMenuButton = new JButton("☰");
    settingsMenuButton.setBounds(10, 10, 50, 30);  // تأكد من ضبط المكان بشكل صحيح
    settingsMenuButton.setVisible(true);
    settingsMenuButton.setEnabled(true);

    // إضافة الأكشن الخاص بزر المينيو
    settingsMenuButton.addActionListener(e -> toggleSettingsMenuPanel());  // استدعاء الدالة الخاصة بفتح/إغلاق المينيو للإعدادات

    // تأكد من أن panel ليس null قبل إضافة الزر
    if (settingsPanel != null) {
        settingsPanel.add(settingsMenuButton, JLayeredPane.PALETTE_LAYER);  // تأكد من إضافته في الطبقة العلوية
        settingsPanel.revalidate();  // تحديث الواجهة بعد إضافة الزر
        settingsPanel.repaint();     // إعادة رسم الواجهة بعد إضافة الزر
    }
}


// دالة لفتح وإغلاق المينيو الخاص بالإعدادات (نفس فكرة btnMenu)
private void toggleSettingsMenuPanel() {
    int startX = sideMenuPanel.getX(); // الحصول على الموقع الحالي للقائمة الجانبية
    int endX; // نهاية حركة القائمة
    int step; // الخطوة التي تتحرك بها القائمة في كل مرة

    // تحديد إذا كانت القائمة مرئية أم لا
    if (isMenuVisible) {
        endX = -150; // إخفاء القائمة بإعادتها إلى خارج الشاشة
        step = -10;   // الإتجاه نحو اليسار (إخفاء)
        System.out.println("Hiding the menu");
    } else {
        endX = 0; // إظهار القائمة
        step = 10; // الإتجاه نحو اليمين (إظهار)
        System.out.println("Showing the menu");
    }

    // إضافة القائمة إلى الطبقة بعد التبديل إذا كانت مخفية
    SwingUtilities.invokeLater(() -> sideMenuPanel.setVisible(true));

    // إنشاء خيط جديد لتحريك القائمة
    Thread animationThread = new Thread(() -> {
        int x = startX; // بداية الحركة من الموقع الحالي للقائمة

        // التكرار حتى نصل إلى النقطة المطلوبة
        while (step > 0 ? x <= endX : x >= endX) {
            final int finalX = x;  // الحصول على الموقع النهائي
            SwingUtilities.invokeLater(() -> {
                sideMenuPanel.setLocation(finalX, 0); // تحريك القائمة
                sideMenuPanel.revalidate(); // إعادة التحقق من حجم المكونات
                sideMenuPanel.repaint();    // إعادة رسم المكونات
            });
            x += step; // تحديث الموقع
            try {
                Thread.sleep(15); // التأخير بين الحركات
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        // بعد الانتهاء من التحريك، تحديث حالة ظهور القائمة
        isMenuVisible = !isMenuVisible;

        // التأكد من أن زر المنيو يظهر بعد إغلاق القائمة
        SwingUtilities.invokeLater(() -> {
            btnMenu.setVisible(true); // إظهار زر المنيو
            btnMenu.setEnabled(true); // تمكين الزر
        });
    });
    animationThread.start(); // بدء الخيط
}

private void showSettingsPage() {
    settingsPanel = new JPanel(null); // استخدام layout يدوي
    settingsPanel.setBackground(Color.WHITE);

    // عنوان الصفحة
    titleLabel = new JLabel("Settings");
    titleLabel.setFont(new Font("Arial", Font.BOLD, 24));
    titleLabel.setBounds(70, 50, 200, 30);
    settingsPanel.add(titleLabel);

    // زر App Theme
    appThemeButton = new JButton("App Theme");
    appThemeButton.setBounds(70, 90, 200, 40);
    appThemeButton.addActionListener(e -> toggleThemeOptions());
    settingsPanel.add(appThemeButton);

    // خيارات Light/Dark Mode
    themeOptionsPanel = new JPanel();
    themeOptionsPanel.setLayout(new BoxLayout(themeOptionsPanel, BoxLayout.Y_AXIS));
    themeOptionsPanel.setBounds(70, 130, 150, 80);
    themeOptionsPanel.setOpaque(false);

    lightMode = new JRadioButton("Light Mode");
    darkMode = new JRadioButton("Dark Mode");

    lightMode.setOpaque(true);
    darkMode.setOpaque(true);

    ButtonGroup group = new ButtonGroup();
    group.add(lightMode);
    group.add(darkMode);

    themeOptionsPanel.add(lightMode);
    themeOptionsPanel.add(darkMode);

    themeOptionsPanel.setVisible(false);
    settingsPanel.add(themeOptionsPanel);

    // زر "Ok" لتطبيق الوضع
    applyButton = new JButton("Ok");
    applyButton.setBounds(70, 220, 80, 30);
    applyButton.setVisible(false);
    applyButton.addActionListener(e -> {
        if (lightMode.isSelected()) {
            setLightMode();
        } else if (darkMode.isSelected()) {
            setDarkMode();
        }

        // الرجوع إلى الصفحة الرئيسية
        setContentPane(jPanel1);
        revalidate();
        repaint();
    });
    settingsPanel.add(applyButton);

    // عرض صفحة الإعدادات
    setContentPane(settingsPanel);
    settingsPanel.setVisible(true);
    revalidate();
    repaint();

    // تطبيق الثيم الحالي
    updateSettingsPageTheme();
}

private void updateSettingsPageTheme() {
    if (settingsPanel != null) {
        if (isLightMode) {
            settingsPanel.setBackground(new Color(230, 230, 230));
            titleLabel.setForeground(Color.BLACK);
            appThemeButton.setBackground(new Color(245, 245, 245));
            appThemeButton.setForeground(Color.BLACK);

            lightMode.setBackground(new Color(230, 230, 230));
            darkMode.setBackground(new Color(230, 230, 230));
            lightMode.setForeground(Color.BLACK);
            darkMode.setForeground(Color.BLACK);
        } else {
            settingsPanel.setBackground(new Color(50, 50, 50));
            titleLabel.setForeground(Color.WHITE);
            appThemeButton.setBackground(new Color(102, 102, 102));
            appThemeButton.setForeground(Color.WHITE);

            lightMode.setBackground(new Color(50, 50, 50));
            darkMode.setBackground(new Color(50, 50, 50));
            lightMode.setForeground(Color.WHITE);
            darkMode.setForeground(Color.WHITE);
        }
    }
}

private void setLightMode() {
            jPanel1.setBackground(new java.awt.Color(230, 230, 230));
            screenpanel.setBackground(new java.awt.Color(220, 230, 255));
            screenTextField.setBackground(new java.awt.Color(220, 230, 255));
            screenTextField.setForeground(new java.awt.Color(0, 0, 0));
            mathLabel.setForeground(new java.awt.Color(0, 0, 0));
            resultLabel.setForeground(new java.awt.Color(0, 0, 0));

            esaLabel1.setForeground(new java.awt.Color(0, 0, 0));


            // إضافة الإطار
            screenpanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(150, 150, 150), 2));

            // الألوان
            java.awt.Color numberButtonColor = new java.awt.Color(245, 245, 245);
            java.awt.Color operatorButtonColor = new java.awt.Color(255, 179, 71);
            java.awt.Color functionButtonColor = new java.awt.Color(200, 230, 255); // لبني فاتح

            // توزيع الأزرار
            javax.swing.JButton[] numberButtons = {zeroButton, oneButton, twoButton, threeButton, fourButton, fiveButton, sixButton, sevenButton, eightButton, nineButton, dotButton, pieButton};
            javax.swing.JButton[] operatorButtons = {plusButton, minusButton, divisionButton, timesButton, equalButton, acButton, delButton, ansButton};
            javax.swing.JButton[] functionButtons = {sinButton, cosButton, tanButton, logButton, lnButton, sqrtButton, sqrt3Button, powButton, pow2Button, eButton, factButton, overxButton, modulusButton, absButton, convertButton,btnHEX,btnOCT,btnBIN,btnDEC}; // ضفنا convertButton هنا
            btnAlpha.setBackground(functionButtonColor);
            btnAlpha.setForeground(new java.awt.Color(0, 0, 0));
                  btnMenu.setBackground(functionButtonColor);
                  btnMenu.setForeground(new java.awt.Color(0, 0, 0)); 
            for (javax.swing.JButton btn : numberButtons) {
                btn.setBackground(numberButtonColor);
                btn.setForeground(new java.awt.Color(0, 0, 0));
            }
            for (javax.swing.JButton btn : operatorButtons) {
                btn.setBackground(operatorButtonColor);
                btn.setForeground(new java.awt.Color(0, 0, 0));
            }
            for (javax.swing.JButton btn : functionButtons) {
                btn.setBackground(functionButtonColor);
                btn.setForeground(new java.awt.Color(0, 0, 0));
            }
        isLightMode = true;
        updateSettingsPageTheme();
        }

        private void setDarkMode() {
            // خلفيات
            jPanel1.setBackground(new java.awt.Color(0, 0, 0)); // أسود كامل
            screenpanel.setBackground(new java.awt.Color(102, 102, 102)); // رمادي غامق للشاشة
            screenTextField.setBackground(new java.awt.Color(102, 102, 102));
            screenTextField.setForeground(new java.awt.Color(255, 255, 255)); // أبيض

            mathLabel.setForeground(new java.awt.Color(255, 255, 255));
            resultLabel.setForeground(new java.awt.Color(255, 255, 255));
            esaLabel1.setForeground(new java.awt.Color(255, 255, 255));
            
            // زرار الوضع


            // تحديد ألوان الأزرار كما في initComponents

            java.awt.Color numberButtonColor = new java.awt.Color(102, 102, 102); // رمادي غامق
            java.awt.Color operatorButtonColor = new java.awt.Color(255, 153, 0); // برتقالي
            java.awt.Color functionButtonColor = new java.awt.Color(0, 51, 153); // أزرق غامق
            java.awt.Color delAcButtonColor = new java.awt.Color(255, 102, 0); // برتقالي غامق
      btnMenu.setBackground(numberButtonColor);
btnMenu.setForeground(new java.awt.Color(255, 255, 255));      
btnAlpha.setBackground(functionButtonColor);
btnAlpha.setForeground(new java.awt.Color(255, 255, 255));
            javax.swing.JButton[] numberButtons = {
                zeroButton, oneButton, twoButton, threeButton, fourButton,
                fiveButton, sixButton, sevenButton, eightButton, nineButton,
                dotButton, pieButton
            };

            javax.swing.JButton[] operatorButtons = {
                plusButton, minusButton, timesButton, divisionButton, equalButton, ansButton
            };

            javax.swing.JButton[] functionButtons = {
                sinButton, cosButton, tanButton, logButton, lnButton,
                sqrtButton, sqrt3Button, powButton, pow2Button, eButton,
                factButton, overxButton, modulusButton, absButton,
                leftButton, rightButton, convertButton,btnHEX,btnOCT,btnBIN,btnDEC
            };

            javax.swing.JButton[] specialButtons = {acButton, delButton};

            // تلوين أزرار الأرقام
            for (javax.swing.JButton btn : numberButtons) {
                btn.setBackground(numberButtonColor);
                btn.setForeground(new java.awt.Color(255, 255, 255));
            }

            // تلوين أزرار العمليات
            for (javax.swing.JButton btn : operatorButtons) {
                btn.setBackground(operatorButtonColor);
                btn.setForeground(new java.awt.Color(0, 0, 0)); // كتابة سوداء
            }

            // تلوين أزرار الدوال
            for (javax.swing.JButton btn : functionButtons) {
                btn.setBackground(functionButtonColor);
                btn.setForeground(new java.awt.Color(255, 255, 255));
            }

            // تلوين أزرار AC و DEL
            for (javax.swing.JButton btn : specialButtons) {
                btn.setBackground(delAcButtonColor);
                btn.setForeground(new java.awt.Color(255, 255, 255));
            }
        isLightMode = false;
        updateSettingsPageTheme();
    }                                       
// دالة لتبديل إظهار وإخفاء الخيارات وزر Ok
private void toggleThemeOptions() {
    if (themeOptionsPanel != null && applyButton != null) {
        boolean visible = themeOptionsPanel.isVisible();
        themeOptionsPanel.setVisible(!visible);
        applyButton.setVisible(!visible);
        settingsPanel.revalidate();
        settingsPanel.repaint();
    }
}

private void showSettingsMenu() {
    // نخفي القائمة الجانبية
    if (sideMenuPanel != null) {
        sideMenuPanel.setVisible(false);
    }

    // فتح صفحة الإعدادات
    showSettingsPage(); // نقوم بفتح صفحة الإعدادات هنا
}


private void toggleMenuPanel() {
    int currentX = sideMenuPanel.getX();
    int endX;
    int step;

    // تحديد إذا كانت القائمة ظاهرة بناءً على موقعها
    if (currentX >= 0) {
        endX = -150;
        step = -10;
        isMenuVisible = true;  // القائمة حالياً ظاهرة، هنخفيها
    } else {
        endX = 0;
        step = 10;
        isMenuVisible = false;  // القائمة حالياً مخفية، هنظهرها
    }

    // تشغيل التحريك
    Thread animationThread = new Thread(() -> {
        int x = currentX;

        while (step > 0 ? x <= endX : x >= endX) {
            final int finalX = x;
            SwingUtilities.invokeLater(() -> {
                sideMenuPanel.setLocation(finalX, 0);
                sideMenuPanel.revalidate();
                sideMenuPanel.repaint();
            });
            x += step;
            try {
                Thread.sleep(15);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        // تحديث الحالة الفعلية بعد الحركة
        isMenuVisible = (endX == 0);

        // تأكد من أن زر المينيو يفضل ظاهر
        SwingUtilities.invokeLater(() -> {
            btnMenu.setVisible(true);
            btnMenu.setEnabled(true);
        });
    });

    // إظهار القائمة قبل بدء التحريك لو كانت مخفية
    SwingUtilities.invokeLater(() -> sideMenuPanel.setVisible(true));
    animationThread.start();
}




    private void btnRightActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:

        int pos = screenTextField.getCaretPosition();
        if (pos < screenTextField.getText().length()) {
            screenTextField.setCaretPosition(pos + 1);
        }
        screenTextField.requestFocusInWindow();
    }                                        

    private void btnLiftActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:

        int pos = screenTextField.getCaretPosition();
        if (pos > 0) {
            screenTextField.setCaretPosition(pos - 1);
        }
        screenTextField.requestFocusInWindow();
    }                                       

    private void ansButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        double val=Double.parseDouble(resultLabel.getText());
        screenTextField.setText(String.valueOf(val));
    }                                         

    private void screenTextFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    private void overxButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:

        double val=Double.parseDouble(screenTextField.getText());
        screenTextField.setText("1"+"/"+String.valueOf(val));
    }                                           

    private void modulusButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        try{
            insertAtCaret("%");
        }
        catch(NumberFormatException e){
            screenTextField.setText("Syntax ERROR");
        }
    }                                             

    private void lnButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:

        insertAtCaret("Ln(");
    }                                        

    private void rightButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        try{
            insertAtCaret(")");
        }
        catch(NumberFormatException e){
            screenTextField.setText("Syntax ERROR");
        }
    }                                           

    private void offButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:

        screenTextField.setText("");
        resultLabel.setText("");
        mathLabel.setText("");
        btnRight.setEnabled(false);
        btnLift.setEnabled(false);
        
        zeroButton.setEnabled(false);
        dotButton.setEnabled(false);
        pieButton.setEnabled(false);
        convertButton.setEnabled(false);
        equalButton.setEnabled(false);
        oneButton.setEnabled(false);
        twoButton.setEnabled(false);
        threeButton.setEnabled(false);
        plusButton.setEnabled(false);
        minusButton.setEnabled(false);
        fourButton.setEnabled(false);
        fiveButton.setEnabled(false);
        sixButton.setEnabled(false);
        sevenButton.setEnabled(false);
        eightButton.setEnabled(false);
        nineButton.setEnabled(false);
        acButton.setEnabled(false);
        convertButton.setEnabled(false);
        absButton.setEnabled(false);
        delButton.setEnabled(false);
        sinButton.setEnabled(false);
        cosButton.setEnabled(false);
        tanButton.setEnabled(false);
        divisionButton.setEnabled(false);
        timesButton.setEnabled(false);
        eButton.setEnabled(false);
        factButton.setEnabled(false);
        overxButton.setEnabled(false);
        ansButton.setEnabled(false);
        pow2Button.setEnabled(false);
        powButton.setEnabled(false);
        rightButton.setEnabled(false);
        leftButton.setEnabled(false);
        sqrtButton.setEnabled(false);
        sqrt3Button.setEnabled(false);
        lnButton.setEnabled(false);
        logButton.setEnabled(false);
        modulusButton.setEnabled(false);
        btnMenu.setEnabled(false);
    }                                         

    private void onButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        screenTextField.setEnabled(true);
        
        btnRight.setEnabled(true);
        btnLift.setEnabled(true);
        zeroButton.setEnabled(true);
        dotButton.setEnabled(true);
        pieButton.setEnabled(true);
        convertButton.setEnabled(true);
        equalButton.setEnabled(true);
        oneButton.setEnabled(true);
        twoButton.setEnabled(true);
        threeButton.setEnabled(true);
        plusButton.setEnabled(true);
        minusButton.setEnabled(true);
        fourButton.setEnabled(true);
        fiveButton.setEnabled(true);
        sixButton.setEnabled(true);
        sevenButton.setEnabled(true);
        eightButton.setEnabled(true);
        nineButton.setEnabled(true);
        acButton.setEnabled(true);
        convertButton.setEnabled(true);
        absButton.setEnabled(true);
        delButton.setEnabled(true);
        sinButton.setEnabled(true);
        cosButton.setEnabled(true);
        tanButton.setEnabled(true);
        divisionButton.setEnabled(true);
        timesButton.setEnabled(true);
        eButton.setEnabled(true);
        factButton.setEnabled(true);
        overxButton.setEnabled(true);
        ansButton.setEnabled(true);
        pow2Button.setEnabled(true);
        powButton.setEnabled(true);
        rightButton.setEnabled(true);
        leftButton.setEnabled(true);
        sqrtButton.setEnabled(true);
        sqrt3Button.setEnabled(true);
        lnButton.setEnabled(true);
        logButton.setEnabled(true);
        modulusButton.setEnabled(true);
        resultLabel.setEnabled(true);
        screenpanel.setEnabled(true);
           btnMenu.setEnabled(true);
        mathLabel.setText("math");
    }                                        



private void showMainMode() {


    // باقي الكود بتاعك زي ما هو
    setContentPane(jPanel1); 
    plusButton.setVisible(true);
    minusButton.setVisible(true);
    timesButton.setVisible(true);
    divisionButton.setVisible(true);
    delButton.setVisible(true);
    ansButton.setVisible(true);
    equalButton.setVisible(true);
    dotButton.setVisible(true);
    pieButton.setVisible(true);
    convertButton.setVisible(true);

    // إخفاء باقي الأزرار
    sinButton.setVisible(false);
    cosButton.setVisible(false);
    tanButton.setVisible(false);
    logButton.setVisible(false);
    lnButton.setVisible(false);
    sqrtButton.setVisible(false);
    powButton.setVisible(false);
    btnHEX.setVisible(false);
    btnOCT.setVisible(false);
    btnDEC.setVisible(false);
    btnBIN.setVisible(false);
    btnAlpha.setVisible(false);
    absButton.setVisible(true);
    eButton.setVisible(true);
    factButton.setVisible(true);
    overxButton.setVisible(true);
    pow2Button.setVisible(false);
    rightButton.setVisible(true);
    leftButton.setVisible(true);
    sqrt3Button.setVisible(false);
    modulusButton.setVisible(false);

    btnMenu.setVisible(true);
    btnMenu.setEnabled(true);
 


    revalidate();
    repaint();
    pack(); // علشان يعدّل الحجم حسب الأزرار المعروضة
    setLocationRelativeTo(null); // يخليها في النص
}

     
private void showFunctionalMode() {
     // تعيين الوضع إلى الوظيفي
    setContentPane(jPanel1); // ← الرجوع للواجهة الرئيسية
    // إخفاء الأزرار الخاصة بالوضع الرئيسي
    plusButton.setVisible(true);
    minusButton.setVisible(true);
    timesButton.setVisible(true);
    divisionButton.setVisible(true);
    delButton.setVisible(true);
    ansButton.setVisible(true);
    equalButton.setVisible(true);
    
    // إخفاء الأزرار الخاصة بالوضع الوظيفي
    sinButton.setVisible(true);
    cosButton.setVisible(true);
    tanButton.setVisible(true);
    logButton.setVisible(true);
    lnButton.setVisible(true);
    sqrtButton.setVisible(true);
    powButton.setVisible(true);
        dotButton.setVisible(true);
        pieButton.setVisible(true);
        convertButton.setVisible(true);

                btnHEX.setVisible(false);
        btnOCT.setVisible(false);
        btnDEC.setVisible(false);
        btnBIN.setVisible(false);
        btnAlpha.setVisible(false);
        
        absButton.setVisible(true);

 
        eButton.setVisible(true);
        factButton.setVisible(true);
        overxButton.setVisible(true);
    
        pow2Button.setVisible(true);
       
        rightButton.setVisible(true);
        leftButton.setVisible(true);
        sqrtButton.setVisible(true);
        sqrt3Button.setVisible(true);
       
        modulusButton.setVisible(true);
     
      

    // التأكد من أن زر المنيو مرئي
    btnMenu.setVisible(true);
    btnMenu.setEnabled(true);

    revalidate();
    repaint();
    pack(); // يضبط الحجم تلقائي حسب المحتوى
setLocationRelativeTo(null); // يخليها في النص
}
private void showProgramingMode(){
    // تعيين الوضع إلى الأساسي
    setContentPane(jPanel1); // ← الرجوع للواجهة الرئيسية
    // إظهار الأزرار الخاصة بالوضع الرئيسي
    plusButton.setVisible(true);
    minusButton.setVisible(true);
    timesButton.setVisible(true);
    divisionButton.setVisible(true);
    ansButton.setVisible(true);
    equalButton.setVisible(true);
    
    pieButton.setVisible(true);
    dotButton.setVisible(true);
    // إخفاء الأزرار الخاصة بالوضع الوظيفي
    sinButton.setVisible(false);
    cosButton.setVisible(false);
    tanButton.setVisible(false);
    logButton.setVisible(false);
    lnButton.setVisible(false);
    sqrtButton.setVisible(false);
    powButton.setVisible(false);
        dotButton.setVisible(true);
        pieButton.setVisible(true);
        convertButton.setVisible(true);
        btnHEX.setVisible(true);
        btnOCT.setVisible(true);
        btnDEC.setVisible(true);
        btnBIN.setVisible(true);
        btnAlpha.setVisible(true);
        
        
        absButton.setVisible(true);

 
        eButton.setVisible(true);
        factButton.setVisible(true);
        overxButton.setVisible(true);
    
        pow2Button.setVisible(false);
       
        rightButton.setVisible(true);
        leftButton.setVisible(true);
        sqrtButton.setVisible(false);
        sqrt3Button.setVisible(false);
       
        modulusButton.setVisible(false);
        delButton.setVisible(true);
        delButton.setEnabled(true);
      
    
   

    // التأكد من أن زر المنيو مرئي
    btnMenu.setVisible(true);
    btnMenu.setEnabled(true);

    revalidate();
    repaint();
    pack(); // يضبط الحجم تلقائي حسب المحتوى
setLocationRelativeTo(null); // يخليها في النص
}

    private void sqrtButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        insertAtCaret("√(");
    }                                          

    private void eButtonActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        screenTextField.setText(screenTextField.getText() +"2.718281828");
    }                                       

    private void sqrt3ButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        insertAtCaret("∛(");
    }                                           

    private void leftButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        try{
            insertAtCaret("(");
        }
        catch(NumberFormatException e){
            screenTextField.setText("Syntax ERROR");
        }
    }                                          

    private void powButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        try{
            insertAtCaret("^");
        }
        catch(NumberFormatException e){
            screenTextField.setText("Syntax ERROR");
        }
    }                                         

    private void pow2ButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        try{
            insertAtCaret("^"+"2");
        }
        catch(NumberFormatException e){
            screenTextField.setText("Syntax ERROR");
        }
    }                                          

    private void sinButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        try{
            insertAtCaret("sin(");

        }
        catch(NumberFormatException e){
            screenTextField.setText("Syntax ERROR");
        }
    }                                         

    private void factButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        double val = Double.parseDouble(screenTextField.getText());
        double result=1;
        for(int i=1;i<=val;i++){
            result=result*i;
        }
        screenTextField.setText(String.valueOf(result));
    }                                          

    private void tanButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        insertAtCaret("tan(");
    }                                         

    private void cosButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        insertAtCaret("cos(");
    }                                         

    private void logButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        insertAtCaret("log(");
    }                                         

    private void absButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        double val=Double.parseDouble(screenTextField.getText());
        screenTextField.setText(String.valueOf(Math.abs(val)));
    }                                         

    private void fourButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:insertAtCaret("0");
        insertAtCaret("4");
    }                                          

    private void acButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        screenTextField.setText("");
        resultLabel.setText("");
    }                                        

    private void eightButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        insertAtCaret("8");
    }                                           

    private void fiveButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        insertAtCaret("5");
    }                                          

    private void sevenButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        insertAtCaret("7");
    }                                           

    private void nineButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        insertAtCaret("9");
    }                                          

    private void timesButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        try{
            insertAtCaret("×");
        }
        catch(NumberFormatException e){
            screenTextField.setText("Syntax ERROR");
        }
    }                                           

    private void delButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        String text = screenTextField.getText();
        int pos = screenTextField.getCaretPosition();
        if(text.startsWith("S")){
            screenTextField.setText("");
            resultLabel.setText("");
        }
        else if(text.startsWith("M")){
            screenTextField.setText("");
            resultLabel.setText("");
        }
        else if(text.startsWith("L")){
            screenTextField.setText("");
            resultLabel.setText("");
        }
        else if (pos > 0 && text.length() > 0) {
            StringBuilder newText = new StringBuilder(text);
            newText.deleteCharAt(pos - 1);
            screenTextField.setText(newText.toString());
            screenTextField.setCaretPosition(pos - 1);
        }

        screenTextField.requestFocusInWindow();
    }                                         

    private void sixButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        insertAtCaret("6");
    }                                         

    private void oneButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        insertAtCaret("1");
    }                                         

    private void twoButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        insertAtCaret("2");
    }                                         

    private void threeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        insertAtCaret("3");
    }                                           

    private void zeroButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        insertAtCaret("0");
    }                                          

    private void plusButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        try{
            insertAtCaret("+");
        }
        catch(NumberFormatException e){
            screenTextField.setText("Syntax ERROR");
        }
    }                                          

    private void minusButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        try{
            insertAtCaret("-");
        }
        catch(NumberFormatException e){
            screenTextField.setText("Syntax ERROR");
        }
    }                                           

    private void convertButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        double value=Double.parseDouble(screenTextField.getText());
        screenTextField.setText(String.valueOf(-value));
    }                                             

    private void equalButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        try {
            String word=screenTextField.getText();
            double result1 = 0;
            double result = 0;
            double result2=0;
            String val;
            double val1;
            double radians;
            double val2;
            List<String> Operators= Arrays.asList("×", "/","÷","%");
            List<String> Operators2= Arrays.asList("+", "-");
            if (word.startsWith("s") && word.endsWith(")") && word.length() < 10){
                val = screenTextField.getText().substring(word.indexOf('(') + 1, word.indexOf(')'));
                val1 = Double.parseDouble(val);
                radians = Math.toRadians(val1);
                result = Math.sin(radians);
                if (result == (int) result) {
                    resultLabel.setText(String.valueOf((int) result));
                } else {
                    resultLabel.setText(String.valueOf(result));
                }

                resultLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                historyBuilder.append(word+"="+result + "\n");
            }
            else if (word.startsWith("(")){
                val = screenTextField.getText().substring(word.indexOf('(') + 1, word.indexOf(')'));
                if (val.contains("+")){
                    String[] part = val.replaceAll("\\++","+").replaceAll("\\--", "+").split("\\+");
                    String first=part[0];
                    String second=part[1];
                    double one=Double.parseDouble(first);
                    double two=Double.parseDouble(second);
                    result=one+two;
                    resultLabel.setText(String.valueOf(result));
                    resultLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                    historyBuilder.append(word+"="+result + "\n");
                }
                else if (val.contains("-")){
                    String[] part = val.split("\\-");
                    String first=part[0];
                    String second=part[1];
                    double one=Double.parseDouble(first);
                    double two=Double.parseDouble(second);
                    result=one-two;
                    resultLabel.setText(String.valueOf(result));
                    resultLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                    historyBuilder.append(word+"="+result + "\n");
                }
                else if (val.contains("×")){
                    String[] part = val.split("\\×");
                    String first=part[0];
                    String second=part[1];
                    double one=Double.parseDouble(first);
                    double two=Double.parseDouble(second);
                    result=one*two;
                    resultLabel.setText(String.valueOf(result));
                    resultLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                    historyBuilder.append(word+"="+result + "\n");
                }
                 else if (val.contains("÷")){
                    String[] part = val.split("\\÷");
                    String first=part[0];
                    String second=part[1];
                    double one=Double.parseDouble(first);
                    double two=Double.parseDouble(second);
                    result=one/two;
                    resultLabel.setText(String.valueOf(result));
                    resultLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                    historyBuilder.append(word+"="+result + "\n");
                }
                
            
            }
            else if (word.startsWith("c") && word.endsWith(")") && word.length() < 10){
                val = screenTextField.getText().substring(word.indexOf('(') + 1, word.indexOf(')'));
                val1 = Double.parseDouble(val);
                radians = Math.toRadians(val1);
                result = Math.cos(radians);
                if (result == (int) result) {
                    resultLabel.setText(String.valueOf((int) result));
                } else {
                    resultLabel.setText(String.valueOf(result));
                }

                resultLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                historyBuilder.append(word+"="+result + "\n");
            }
            else if (word.startsWith("t") && word.endsWith(")") && word.length() < 10) {
                val = screenTextField.getText().substring(word.indexOf('(') + 1, word.indexOf(')'));
                val1 = Double.parseDouble(val);
                radians = Math.toRadians(val1);
                result = Math.tan(radians);
                if (result == (int) result) {
                    resultLabel.setText(String.valueOf((int) result));
                } else {
                    resultLabel.setText(String.valueOf(result));
                }

                resultLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                historyBuilder.append(word+"="+result + "\n");
            }
            else if (word.startsWith("l") && word.endsWith(")") && word.length() < 10) {
                val = screenTextField.getText().substring(word.indexOf('(') + 1, word.indexOf(')'));
                val2 = Double.parseDouble(val);
                if (val2 <= 0) {
                    screenTextField.setText("Math Error");
                }
                else {
                    result = Math.log10(val2);
                    if (result == (int) result) {
                        resultLabel.setText(String.valueOf((int) result));
                    } else {
                        resultLabel.setText(String.valueOf(result));
                    }

                    resultLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                    historyBuilder.append(word+"="+result + "\n");
                }
            }
            else if (word.startsWith("L") && word.endsWith(")") && word.length() < 10) {
                val = screenTextField.getText().substring(word.indexOf('(') + 1, word.indexOf(')'));
                val2 = Double.parseDouble(val);
                if (val2 <= 0) {
                    screenTextField.setText("Math Error");
                } else {
                    result = Math.log(val2);
                    if (result == (int) result) {
                        resultLabel.setText(String.valueOf((int) result));
                    } else {
                        resultLabel.setText(String.valueOf(result));
                    }

                    resultLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                    historyBuilder.append(word+"="+result + "\n");
                }
            }
            else if (word.startsWith("√") && word.endsWith(")") && word.length() < 10) {
                val = screenTextField.getText().substring(word.indexOf('(') + 1, word.indexOf(')'));
                val2 = Double.parseDouble(val);
                if (val2 < 0) {
                    screenTextField.setText("Math Error");
                }
                else {
                    result=Math.sqrt(val2);
                    if (result == (int) result) {
                        resultLabel.setText(String.valueOf((int) result));
                    } else {
                        resultLabel.setText(String.valueOf(result));
                    }

                    resultLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                    historyBuilder.append(word+"="+result + "\n");
                }
            }
            else if (word.startsWith("∛") && word.endsWith(")") && word.length() < 10) {
                val = screenTextField.getText().substring(word.indexOf('(') + 1, word.indexOf(')'));
                val2 = Double.parseDouble(val);
                if (val2 < 0) {
                    screenTextField.setText("Math Error");
                }

                else {
                    result=Math.cbrt(val2);
                    if (result == (int) result) {
                        resultLabel.setText(String.valueOf((int) result));
                    } else {
                        resultLabel.setText(String.valueOf(result));
                    }

                    resultLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                    historyBuilder.append(word+"="+result + "\n");
                }
            }
            else if(word.contains("^")){
                    String[] part1 = word.split("\\^");
                    double firstNum=Double.parseDouble(part1[0]);
                    double secondNum=Double.parseDouble(part1[1]);
                    result1 = Math.pow(firstNum, secondNum);
                    resultLabel.setText(String.valueOf(result1));
                    resultLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                    historyBuilder.append(word+"="+result1 + "\n");
            }


            else if(word.contains("+")||word.contains("--")){
                String[] part = screenTextField.getText().replaceAll("\\++","+").replaceAll("\\--", "+").split("\\+");
                String first=part[0];
                String second=part[1];
                if (first.startsWith("s")) {
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result1 = Math.sin(radians);
                }
                else if(first.startsWith("c")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result1 = Math.cos(radians);
                }
                else if(first.startsWith("t")){
                    val =first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result1 = Math.tan(radians);

                }
                else if(first.startsWith("l")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result1 = Math.log10(val2);

                    }
                }
                else if(first.startsWith("L")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    } else {
                        result1 = Math.log(val2);

                    }

                }
                else if(first.startsWith("√")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result1=Math.sqrt(val2);

                    }
                }
                else if(first.startsWith("∛")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result1=Math.cbrt(val2);

                    }
                }
                else if(first.contains("^")){
                    String[] part1 = first.split("\\^");
                    double firstNum=Double.parseDouble(part1[0]);
                    double secondNum=Double.parseDouble(part1[1]);
                    result1 = Math.pow(firstNum, secondNum);

                }
                else{
                    result1=Double.parseDouble(String.valueOf(first));
                }
                if (second.startsWith("s")) {
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result2 = Math.sin(radians);
                }
                else if(second.startsWith("c")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result2 = Math.cos(radians);
                }
                else if(second.startsWith("t")){
                    val =second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result2 = Math.tan(radians);

                }
                else if(second.startsWith("l")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result2 = Math.log10(val2);

                    }
                }
                else if(second.startsWith("L")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    } else {
                        result2 = Math.log(val2);

                    }

                }
                else if(second.startsWith("√")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result2=Math.sqrt(val2);

                    }
                }
                else if(second.startsWith("∛")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result2=Math.cbrt(val2);

                    }
                }
                else if(second.contains("^")){
                    String[] part1 = second.split("\\^");
                    double firstNum=Double.parseDouble(part1[0]);
                    double secondNum=Double.parseDouble(part1[1]);
                    result2 = Math.pow(firstNum, secondNum);

                }
                else{
                    result2=Double.parseDouble(String.valueOf(second));
                }
                result=result1+result2;
                if (result == (int) result) {
                    resultLabel.setText(String.valueOf((int) result));
                } else {
                    resultLabel.setText(String.valueOf(result));
                }

                resultLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                historyBuilder.append(word+"="+result + "\n");

            }
            else if(word.contains("×")){
                String[] part = screenTextField.getText().trim().split("\\×");
                String first=part[0];
                String second=part[1];
                if (first.startsWith("s")) {
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result1 = Math.sin(radians);
                }
                else if(first.startsWith("c")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result1 = Math.cos(radians);
                }
                else if(first.startsWith("t")){
                    val =first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result1 = Math.tan(radians);

                }
                else if(first.startsWith("l")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result1 = Math.log10(val2);

                    }
                }
                else if(first.startsWith("L")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    } else {
                        result1 = Math.log(val2);

                    }

                }
                else if(first.startsWith("√")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result1=Math.sqrt(val2);

                    }
                }
                else if(first.startsWith("∛")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result1=Math.cbrt(val2);

                    }
                }
                else if(first.contains("^")){
                    String[] part1 = first.split("\\^");
                    double firstNum=Double.parseDouble(part1[0]);
                    double secondNum=Double.parseDouble(part1[1]);
                    result1 = Math.pow(firstNum, secondNum);

                }
                else{
                    result1=Double.parseDouble(String.valueOf(first));
                }
                if (second.startsWith("s")) {
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result2 = Math.sin(radians);
                }
                else if(second.startsWith("c")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result2 = Math.cos(radians);
                }
                else if(second.startsWith("t")){
                    val =second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result2 = Math.tan(radians);

                }
                else if(second.startsWith("l")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result2 = Math.log10(val2);

                    }
                }
                else if(second.startsWith("L")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    } else {
                        result2 = Math.log(val2);

                    }

                }
                else if(second.startsWith("√")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result2=Math.sqrt(val2);

                    }
                }
                else if(second.startsWith("∛")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result2=Math.cbrt(val2);

                    }
                }
                else if(second.contains("^")){
                    String[] part1 = second.split("\\^");
                    double firstNum=Double.parseDouble(part1[0]);
                    double secondNum=Double.parseDouble(part1[1]);
                    result2 = Math.pow(firstNum, secondNum);

                }
                else{
                    result2=Double.parseDouble(String.valueOf(second));
                }
                result=result1*result2;
                if (result == (int) result) {
                    resultLabel.setText(String.valueOf((int) result));
                } else {
                    resultLabel.setText(String.valueOf(result));
                }

                resultLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                historyBuilder.append(word+"="+result + "\n");
            }
            else if(word.contains("/")){
                String[] part = screenTextField.getText().trim().split("\\/");
                String first=part[0];
                String second=part[1];
                if (first.startsWith("s")) {
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result1 = Math.sin(radians);
                }
                else if(first.startsWith("c")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result1 = Math.cos(radians);
                }
                else if(first.startsWith("t")){
                    val =first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result1 = Math.tan(radians);

                }
                else if(first.startsWith("l")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result1 = Math.log10(val2);

                    }
                }
                else if(first.startsWith("L")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    } else {
                        result1 = Math.log(val2);

                    }

                }
                else if(first.startsWith("√")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result1=Math.sqrt(val2);

                    }
                }
                else if(first.startsWith("∛")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result1=Math.cbrt(val2);

                    }
                }
                else if(first.contains("^")){
                    String[] part1 = first.split("\\^");
                    double firstNum=Double.parseDouble(part1[0]);
                    double secondNum=Double.parseDouble(part1[1]);
                    result1 = Math.pow(firstNum, secondNum);

                }
                else{
                    result1=Double.parseDouble(String.valueOf(first));
                }
                if (second.startsWith("s")) {
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result2 = Math.sin(radians);
                }
                else if(second.startsWith("c")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result2 = Math.cos(radians);
                }
                else if(second.startsWith("t")){
                    val =second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result2 = Math.tan(radians);

                }
                else if(second.startsWith("l")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result2 = Math.log10(val2);

                    }
                }
                else if(second.startsWith("L")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    } else {
                        result2 = Math.log(val2);

                    }

                }
                else if(second.startsWith("√")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result2=Math.sqrt(val2);

                    }
                }
                else if(second.startsWith("∛")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result2=Math.cbrt(val2);

                    }
                }

                else if(second.contains("^")){
                    String[] part1 = second.split("\\^");
                    double firstNum=Double.parseDouble(part1[0]);
                    double secondNum=Double.parseDouble(part1[1]);
                    result2 = Math.pow(firstNum, secondNum);

                }
                else{
                    result2=Double.parseDouble(String.valueOf(second));
                }
                result=result1/result2;
                if (result == (int) result) {
                    resultLabel.setText(String.valueOf((int) result));
                } else {
                    resultLabel.setText(String.valueOf(result));
                }

                resultLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                historyBuilder.append(word+"="+result + "\n");
            }
            else if(word.contains("÷")){
                String[] part = screenTextField.getText().trim().split("\\÷");
                String first=part[0];
                String second=part[1];
                if (first.startsWith("s")) {
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result1 = Math.sin(radians);
                }
                else if(first.startsWith("c")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result1 = Math.cos(radians);
                }
                else if(first.startsWith("t")){
                    val =first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result1 = Math.tan(radians);

                }
                else if(first.startsWith("l")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result1 = Math.log10(val2);

                    }
                }
                else if(first.startsWith("L")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    } else {
                        result1 = Math.log(val2);

                    }

                }
                else if(first.startsWith("√")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result1=Math.sqrt(val2);

                    }
                }
                else if(first.startsWith("∛")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result1=Math.cbrt(val2);

                    }
                }
                else if(first.contains("^")){
                    String[] part1 = first.split("\\^");
                    double firstNum=Double.parseDouble(part1[0]);
                    double secondNum=Double.parseDouble(part1[1]);
                    result1 = Math.pow(firstNum, secondNum);

                }
                else{
                    result1=Double.parseDouble(String.valueOf(first));
                }
                if (second.startsWith("s")) {
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result2 = Math.sin(radians);
                }
                else if(second.startsWith("c")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result2 = Math.cos(radians);
                }
                else if(second.startsWith("t")){
                    val =second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result2 = Math.tan(radians);

                }
                else if(second.startsWith("l")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result2 = Math.log10(val2);

                    }
                }
                else if(second.startsWith("L")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    } else {
                        result2 = Math.log(val2);

                    }

                }
                else if(second.startsWith("√")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result2=Math.sqrt(val2);

                    }
                }
                else if(second.startsWith("∛")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result2=Math.cbrt(val2);

                    }
                }
                else if(second.contains("^")){
                    String[] part1 = second.split("\\^");
                    double firstNum=Double.parseDouble(part1[0]);
                    double secondNum=Double.parseDouble(part1[1]);
                    result2 = Math.pow(firstNum, secondNum);

                }
                else{
                    result2=Double.parseDouble(String.valueOf(second));
                }
                result=result1/result2;
                if (result == (int) result) {
                    resultLabel.setText(String.valueOf((int) result));
                } else {
                    resultLabel.setText(String.valueOf(result));
                }

                resultLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                historyBuilder.append(word+"="+result + "\n");
            }
            else if(word.contains("%")){
                String[] part = screenTextField.getText().trim().split("\\%");
                String first=part[0];
                String second=part[1];
                if (first.startsWith("s")) {
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result1 = Math.sin(radians);
                }
                else if(first.startsWith("c")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result1 = Math.cos(radians);
                }
                else if(first.startsWith("t")){
                    val =first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result1 = Math.tan(radians);

                }
                else if(first.startsWith("l")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result1 = Math.log10(val2);

                    }
                }
                else if(first.startsWith("L")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    } else {
                        result1 = Math.log(val2);

                    }

                }
                else if(first.startsWith("√")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result1=Math.sqrt(val2);

                    }
                }
                else if(first.startsWith("∛")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result1=Math.cbrt(val2);

                    }
                }
                else if(first.contains("^")){
                    String[] part1 = first.split("\\^");
                    double firstNum=Double.parseDouble(part1[0]);
                    double secondNum=Double.parseDouble(part1[1]);
                    result1 = Math.pow(firstNum, secondNum);

                }
                else{
                    result1=Double.parseDouble(String.valueOf(first));
                }
                if (second.startsWith("s")) {
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result2 = Math.sin(radians);
                }
                else if(second.startsWith("c")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result2 = Math.cos(radians);
                }
                else if(second.startsWith("t")){
                    val =second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result2 = Math.tan(radians);

                }
                else if(second.startsWith("l")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result2 = Math.log10(val2);

                    }
                }
                else if(second.startsWith("L")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    } else {
                        result2 = Math.log(val2);

                    }

                }
                else if(second.startsWith("√")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result2=Math.sqrt(val2);

                    }
                }
                else if(second.startsWith("∛")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result2=Math.cbrt(val2);

                    }
                }
                else if(second.contains("^")){
                    String[] part1 = second.split("\\^");
                    double firstNum=Double.parseDouble(part1[0]);
                    double secondNum=Double.parseDouble(part1[1]);
                    result2 = Math.pow(firstNum, secondNum);

                }
                else{
                    result2=Double.parseDouble(String.valueOf(second));
                }
                result=result1%result2;
                if (result == (int) result) {
                    resultLabel.setText(String.valueOf((int) result));
                } else {
                    resultLabel.setText(String.valueOf(result));
                }

                resultLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                historyBuilder.append(word+"="+result + "\n");
            }
            else if(word.contains("-")){
                String[] part = screenTextField.getText().trim().split("\\-");
                String first=part[0];
                String second=part[1];
                if (first.startsWith("s")) {
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result1 = Math.sin(radians);
                }
                else if(first.startsWith("c")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result1 = Math.cos(radians);
                }
                else if(first.startsWith("t")){
                    val =first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result1 = Math.tan(radians);

                }
                else if(first.startsWith("l")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result1 = Math.log10(val2);

                    }
                }
                else if(first.startsWith("L")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    } else {
                        result1 = Math.log(val2);

                    }

                }
                else if(first.startsWith("√")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result1=Math.sqrt(val2);

                    }
                }
                else if(first.startsWith("∛")){
                    val = first.substring(first.indexOf('(') + 1, first.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result1=Math.cbrt(val2);

                    }
                }
                else if(first.contains("^")){
                    String[] part1 = first.split("\\^");
                    double firstNum=Double.parseDouble(part1[0]);
                    double secondNum=Double.parseDouble(part1[1]);
                    result1 = Math.pow(firstNum, secondNum);

                }
                else{
                    result1=Double.parseDouble(String.valueOf(first));
                }
                if (second.startsWith("s")) {
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result2 = Math.sin(radians);
                }
                else if(second.startsWith("c")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result2 = Math.cos(radians);
                }
                else if(second.startsWith("t")){
                    val =second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val1 = Double.parseDouble(val);
                    radians = Math.toRadians(val1);
                    result2 = Math.tan(radians);

                }
                else if(second.startsWith("l")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result2 = Math.log10(val2);

                    }
                }
                else if(second.startsWith("L")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 <= 0) {
                        screenTextField.setText("Math Error");
                    } else {
                        result2 = Math.log(val2);

                    }

                }
                else if(second.startsWith("√")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result2=Math.sqrt(val2);

                    }
                }
                else if(second.startsWith("∛")){
                    val = second.substring(second.indexOf('(') + 1, second.indexOf(')'));
                    val2 = Double.parseDouble(val);
                    if (val2 < 0) {
                        screenTextField.setText("Math Error");
                    }
                    else {
                        result2=Math.cbrt(val2);

                    }
                }
                else if(second.contains("^")){
                    String[] part1 = second.split("\\^");
                    double firstNum=Double.parseDouble(part1[0]);
                    double secondNum=Double.parseDouble(part1[1]);
                    result2 = Math.pow(firstNum, secondNum);

                }
                else{
                    result2=Double.parseDouble(String.valueOf(second));
                }
                result=result1-result2;
                if (result == (int) result) {
                    resultLabel.setText(String.valueOf((int) result));
                } else {
                    resultLabel.setText(String.valueOf(result));
                }

                resultLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                historyBuilder.append(word+"="+result + "\n");
            }
            else{
                double firstnum = Double.parseDouble(String.valueOf(word));
                if (result == (int) result) {
                    resultLabel.setText(String.valueOf((int) result));
                } else {
                    resultLabel.setText(String.valueOf(result));
                }

                resultLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                historyBuilder.append(word+"="+result + "\n");
            }
            for(String op:Operators){
                if(word.startsWith(op)||word.endsWith(op)){
                    screenTextField.setText("Syntax Error");
                    break;
                }
            }
            for(String op:Operators2){
                if(word.endsWith(op)){
                    screenTextField.setText("Syntax Error");
                    break;
                }
            }
        }
        catch (NumberFormatException e) {
            screenTextField.setText("Math Error");
        }
    }                                           

    private void dotButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        insertAtCaret(".");
    }                                         

    private void pieButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        insertAtCaret("3.14");
    }                                         

    private void divisionButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
        try{
            insertAtCaret("÷");
        }
        catch(NumberFormatException e){
            screenTextField.setText("Syntax ERROR");
        }
    }                                              

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:

                                        
 toggleMenuPanel();

    }                                       

    private void btnHEXActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
    String input = screenTextField.getText().toUpperCase();
    try {
        if (input.matches("\\d+")) {  // إذا كان Decimal
            int dec = Integer.parseInt(input);
            screenTextField.setText(Integer.toHexString(dec).toUpperCase());
        } else {
            screenTextField.setText("Invalid Decimal");
        }
    } catch (NumberFormatException e) {
        screenTextField.setText("Invalid Input");
    }
    }                                      

    private void btnBINActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
    String input = screenTextField.getText().toUpperCase();
    try {
        if (input.matches("[0-9A-F]+")) {  // إذا كان Hex
            int hex = Integer.parseInt(input, 16);
            screenTextField.setText(Integer.toBinaryString(hex));
        } else if (input.matches("\\d+")) {  // إذا كان Decimal
            int dec = Integer.parseInt(input);
            screenTextField.setText(Integer.toBinaryString(dec));
        } else {
            screenTextField.setText("Invalid Input");
        }
    } catch (NumberFormatException e) {
        screenTextField.setText("Invalid Input");
    }
    }                                      

    private void btnOCTActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
    String input = screenTextField.getText().toUpperCase();
    try {
        if (input.matches("[0-9A-F]+")) {  // إذا كان Hex
            int hex = Integer.parseInt(input, 16);
            screenTextField.setText(Integer.toOctalString(hex));
        } else if (input.matches("\\d+")) {  // إذا كان Decimal
            int dec = Integer.parseInt(input);
            screenTextField.setText(Integer.toOctalString(dec));
        } else {
            screenTextField.setText("Invalid Input");
        }
    } catch (NumberFormatException e) {
        screenTextField.setText("Invalid Input");
    }
    }                                      

    private void btnDECActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        String input = screenTextField.getText().toUpperCase();
    try {
        if (input.matches("[01]+")) {  // إذا كان Binary
            int bin = Integer.parseInt(input, 2);
            screenTextField.setText(String.valueOf(bin));
        } else if (input.matches("[0-7]+")) {  // إذا كان Octal
            int oct = Integer.parseInt(input, 8);
            screenTextField.setText(String.valueOf(oct));
        } else if (input.matches("[0-9A-F]+")) {  // إذا كان Hex
            int hex = Integer.parseInt(input, 16);
            screenTextField.setText(String.valueOf(hex));
        } else {
            screenTextField.setText("Invalid Format");
        }
    } catch (NumberFormatException e) {
        screenTextField.setText("Invalid Input");
    }
    }                                      

    private void btnAlphaActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        
 
            String selected = (String) btnAlpha.getSelectedItem();

        if (selected != null) {
            insertAtCaret(selected);
        }

    }                                        



    private void insertAtCaret(String value) {
    
    String currentText = screenTextField.getText();
    int pos = screenTextField.getCaretPosition();
    String newText = currentText.substring(0, pos) + value + currentText.substring(pos);
    screenTextField.setText(newText);
    screenTextField.setCaretPosition(pos + value.length());
    screenTextField.requestFocusInWindow();
}

    /**
     * @param args the command line arguments
     */

 public static void main(String[] args) {
    SwingUtilities.invokeLater(() -> {
        Calculator app = new Calculator();
        app.setVisible(true);
        app.showMainMode();  // تعيين الوضع الافتراضي عند بدء التطبيق
    });
}


    // Variables declaration - do not modify                     
    private javax.swing.JButton absButton;
    private javax.swing.JButton acButton;
    private javax.swing.JButton ansButton;
    private javax.swing.JComboBox<String> btnAlpha;
    private javax.swing.JButton btnBIN;
    private javax.swing.JButton btnDEC;
    private javax.swing.JButton btnHEX;
    private javax.swing.JButton btnLift;
    private javax.swing.JButton btnMenu;
    private javax.swing.JButton btnOCT;
    private javax.swing.JButton btnRight;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton convertButton;
    private javax.swing.JButton cosButton;
    private javax.swing.JButton delButton;
    private javax.swing.JButton divisionButton;
    private javax.swing.JButton dotButton;
    private javax.swing.JButton eButton;
    private javax.swing.JButton eightButton;
    private javax.swing.JButton equalButton;
    private javax.swing.JLabel esaLabel1;
    private javax.swing.JButton factButton;
    private javax.swing.JButton fiveButton;
    private javax.swing.JButton fourButton;
    private javax.swing.JButton jButton31;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JButton leftButton;
    private javax.swing.JButton lnButton;
    private javax.swing.JButton logButton;
    private javax.swing.JLabel mathLabel;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.MenuBar menuBar1;
    private javax.swing.JButton minusButton;
    private javax.swing.JButton modulusButton;
    private javax.swing.JButton nineButton;
    private javax.swing.JButton offButton;
    private javax.swing.JButton onButton;
    private javax.swing.JButton oneButton;
    private javax.swing.JButton overxButton;
    private javax.swing.JButton pieButton;
    private javax.swing.JButton plusButton;
    private javax.swing.JButton pow2Button;
    private javax.swing.JButton powButton;
    private javax.swing.JLabel resultLabel;
    private javax.swing.JButton rightButton;
    private javax.swing.JTextField screenTextField;
    private javax.swing.JPanel screenpanel;
    private javax.swing.JButton sevenButton;
    private javax.swing.JButton sinButton;
    private javax.swing.JButton sixButton;
    private javax.swing.JButton sqrt3Button;
    private javax.swing.JButton sqrtButton;
    private javax.swing.JButton tanButton;
    private javax.swing.JButton threeButton;
    private javax.swing.JButton timesButton;
    private javax.swing.JButton twoButton;
    private javax.swing.JButton zeroButton;
    // End of variables declaration                   



}
